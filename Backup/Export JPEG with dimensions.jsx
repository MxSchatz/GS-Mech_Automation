//DESCRIPTION:Export the selection to jpeg format with the desired dimensions// Export jpeg with dimensions.jsx//// Modified 2013-06-11// Keith Gilbert, Gilbert Consulting// www.gilbertconsulting.com// blog.gilbertconsulting.com// Modified by Winter Schatz#target indesignMain();function Main() {	// Check to see whether any InDesign documents are open.	// If no documents are open, display an error message.	if (app.documents.length > 0) {		var myDoc = app.activeDocument;		// Turn off screen redraw while the script runs		var userRedrawSetting = app.scriptPreferences.enableRedraw;		app.scriptPreferences.enableRedraw = false;		// Set the measurement system to points and the origin to page		userHoriz = myDoc.viewPreferences.horizontalMeasurementUnits;		userVert = myDoc.viewPreferences.verticalMeasurementUnits;		userOrigin = myDoc.viewPreferences.rulerOrigin;		myDoc.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.points;		myDoc.viewPreferences.verticalMeasurementUnits = MeasurementUnits.points;		myDoc.viewPreferences.rulerOrigin = RulerOrigin.PAGE_ORIGIN;		myDoc.zeroPoint = [0,0];		var mySelection = app.selection;		if (mySelection.length > 0) { // At least 1 object is selected			if (mySelection.length > 1) { // Multiple objects are selected				var myObject = app.activeWindow.activePage.groups.add(app.selection);				var myGroup = true;			}			else { // Only 1 object is selected				var myObject = app.selection[0];			}			var myCurrentWidth = myObject.visibleBounds[3]-myObject.visibleBounds[1];			var myCurrentHeight = myObject.visibleBounds[2]-myObject.visibleBounds[0];			// Prompt the user where to save the file			var myFilePath = File.saveDialog("Choose a name and location to export the jpeg file to. Be sure to add the .jpeg extension.");			if (myFilePath) { // User did not click Cancel				var myResultsArray = new Array;				var myResultsArray = myInput();				if (myResultsArray) { // User did not click Cancel					var myWidth = myResultsArray[0];					var myHeight = myResultsArray[1];					switch(myResultsArray[2]) { // Quality						case "Maximum":							app.jpegExportPreferences.jpegQuality = jpegQualityEnum.MAXIMUM;						break;						case "High":							app.jpegExportPreferences.jpegQuality = jpegQualityEnum.HIGH;						break;						case "Medium":							app.jpegExportPreferences.jpegQuality = jpegQualityEnum.MEDIUM;						break;						case "Low":							app.jpegExportPreferences.jpegQuality = jpegQualityEnum.LOW;						break;						default:						break;					}					switch(myResultsArray[3]) { // Colorspace						case "RGB":							app.jpegExportPreferences.jpegColorSpace = jpegColorSpaceEnum.RGB;						break;						case "Gray":							app.jpegExportPreferences.jpegColorSpace = jpegColorSpaceEnum.GRAY;						break;						default:						break;					}								app.jpegExportPreferences.transparentBackground = myResultsArray[4];					app.jpegExportPreferences.antiAlias = myResultsArray[5];					app.jpegExportPreferences.simulateOverprint = myResultsArray[6];					if (myWidth > 0) {						// Calculate the scale percentage						var myResizePercentage = myWidth/myCurrentWidth;						var myExportRes = myResizePercentage * 72;							// exportResolution is only accurate to 1 decimal place, so round					}					else {						// Calculate the scale percentage						var myResizePercentage = myHeight/myCurrentHeight;						var myExportRes = myResizePercentage * 72;					}					app.jpegExportPreferences.exportResolution = myExportRes;								myObject.exportFile(ExportFormat.jpeg_FORMAT, File(myFilePath), false);				}			}		}		else {			alert("Please select at least one object and try again");		}		// undo the grouping		if (myGroup) {			myDoc.undo();		}		// Return the measurement system and origin to the way it was		myDoc.viewPreferences.horizontalMeasurementUnits = userHoriz;		myDoc.viewPreferences.verticalMeasurementUnits = userVert;		myDoc.viewPreferences.rulerOrigin = userOrigin;		// Turn screen redraw back to what it was		app.scriptPreferences.enableRedraw = userRedrawSetting;	}	else {		// No documents are open, so display an error message.		alert("No InDesign documents are open. Please open a document and try again.")	}}// Prompt the user for jpeg export valuesfunction myInput() {	var myWindow = new Window("dialog", "Export jpeg to size");		myWindow.preferredSize = [372,418];		myWindow.alignChildren = "right";		var mySizePanel = myWindow.add("panel", undefined, "Enter the desired export size in pixels");			mySizePanel.alignChildren = "left";			mySizePanel.margins = 20;			mySizePanel.preferredSize = [340,75];			var mySizeGroup = mySizePanel.add("group", undefined);							mySizeGroup.add("statictext", undefined, "Width:");				var myWidthField = mySizeGroup.add("edittext", undefined, "");					myWidthField.characters = 6;					myWidthField.active = true;				mySizeGroup.add("statictext", undefined, "\u00A0\u00A0\u00A0OR\u00A0\u00A0\u00A0");				mySizeGroup.add("statictext", undefined, "Height:");				var myHeightField = mySizeGroup.add("edittext", undefined, "");					myHeightField.characters = 6;		var myImagePanel = myWindow.add("panel", undefined, "Image");			myImagePanel.orientation = "column";			myImagePanel.alignChildren = "right";			myImagePanel.margins = 20;			myImagePanel.preferredSize = [340,106];			var myQualityGroup = myImagePanel.add("group", undefined);				myQualityGroup.orientation = "row";				myQualityGroup.add("statictext", undefined, "Quality:");				var myQualityField = myQualityGroup.add("dropdownlist", undefined, ["Maximum", "High", "Medium", "Low"]);					myQualityField.selection = 0;					myQualityField.preferredSize = [200,21];			var myColorSpaceGroup = myImagePanel.add("group", undefined);				myColorSpaceGroup.orientation = "row";				myColorSpaceGroup.add("statictext", undefined, "Color Space:");				var myColorSpaceField = myColorSpaceGroup.add("dropdownlist", undefined, ["RGB", "Gray"]);					myColorSpaceField.selection = 0;					myColorSpaceField.preferredSize = [200,21];		var myOptionsPanel = myWindow.add("panel", undefined, "Options");			myOptionsPanel.orientation = "column";			myOptionsPanel.alignChildren = "left";			myOptionsPanel.margins = 20;			myOptionsPanel.preferredSize = [340,127];			var myBackgroundField = myOptionsPanel.add("checkbox", undefined, "\u00A0Transparent Background");				myBackgroundField.value = true;			var myAliasField = myOptionsPanel.add("checkbox", undefined, "\u00A0Anti-alias");				myAliasField.value = true;			var myOverprintField = myOptionsPanel.add("checkbox", undefined, "\u00A0Simulate Overprint");		var myButtonGroup = myWindow.add ("group");			var myCancelBtn = myButtonGroup.add ("button", undefined, "Cancel");			var myExportBtn = myButtonGroup.add ("button", undefined, "Export", {name:"ok"});		myExportBtn.onClick = function() { // User clicked the OK button			if (((myWidthField.text == "") && (myHeightField.text == "")) ||				((myWidthField.text != "") && (myHeightField.text != ""))) {				alert("Please enter an export width OR height in pixels");			}			else {				if (isNaN(myWidthField.text) || isNaN(myHeightField.text)) {					alert ("Only numbers are allowed in the Width and Height fields");				}				else {					exit(); // This onClick function				}			}		}	if (myWindow.show() == 1) { // User didn't click the cancel button		return [myWidthField.text, myHeightField.text, myQualityField.selection.text, myColorSpaceField.selection.text, myBackgroundField.value, myAliasField.value, myOverprintField.value];	}	else {		return; // This dialog function	}	}